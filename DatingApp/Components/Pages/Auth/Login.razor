@page "/auth/login"
@using DatingApp.Components.Layout
@using DatingApp.Data.Models
@using DatingApp.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@layout EmptyLayout
@rendermode InteractiveServer

<div class="w-screen h-screen flex items-center justify-center flex-col">
    <div class="flex flex-col text-start w-1/2 mb-4">
        <h2 class="text-2xl">Welcome back</h2>
        <h3 class="text-sm">Please enter your password</h3>
    </div>
    <EditForm EditContext="@_editContext" class="w-1/2" Enhance FormName="loginForm">
        <DataAnnotationsValidator/>
        <div class="flex flex-col text-start pl-3 border-l-2 border-gray-400 mb-4">
            <h4 class="text-slate-400">This email will be used to login to your account</h4>
            <p class="font-semibold text-gray-500">@_formUser.Email</p>
        </div>
        <InputText @bind-Value="_formUser.Password" class="mb-4 shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="password" type="password" placeholder="Password"/>
        <button @onclick="SignInCallback" class="w-full py-1.5 rounded border">Sign in</button>
    </EditForm>
    <div class="fixed bottom-4 right-4 transform bg-red-500 text-white px-4 py-2 rounded shadow-lg transition-opacity duration-500 @(_errorShown ? "opacity-100 pointer-events-auto" : "opacity-0 pointer-events-none ")">
        Invalid password 
    </div>
</div>

@code {
    private User _formUser = new();
    private EditContext? _editContext;
    
    private Boolean _errorShown = false;
    private CancellationTokenSource? _cts;

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        if (AuthService.LoginUser.Id == 0)
        {
            Navigation.NavigateTo("/auth");
        }

        _formUser.Email = AuthService.LoginUser.Email;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_formUser);
    }

    private void SignInCallback()
    {
        if (AuthService.Login(_formUser.Password)) return;
        _errorShown = true;
        StateHasChanged();
        _cts?.Cancel();
        _cts = new CancellationTokenSource();
        _ = HideAfterDelay(_cts.Token);
    }
    
    private async Task HideAfterDelay(CancellationToken token)
    {
        try
        {
            await Task.Delay(1500, token); // Adjust the delay as needed
            if (!token.IsCancellationRequested)
            {
                _errorShown = false;
                StateHasChanged();
            }
        }
        catch (TaskCanceledException)
        {
            // Ignore cancellation exception
        }
    }

}