@page "/Profile/{ProfileId:int?}"
@using DatingApp.Data.Models
@using DatingApp.Services
@rendermode InteractiveServer
@inject AuthService AuthService
@inject LikeService LikeService
@inject IJSRuntime JsRuntime
@inject ProfileService ProfileService
@inject NavigationManager Navigation

<AuthedView ReturnAfterAuth="true">
    @if (ProfileId == null)
    {
        @if (_ownProfile)
        {
            <h2>Your Profile Hasn't been setup yet</h2>
            <StyledButton ButtonStyle="StyledButton.Style.Blue" OnClickCallback="CreateProfile">Opret profil</StyledButton>
        }
        else
        {
            <h1>Profile not found</h1>
        }
    }
    else
    {
        if (_profile != null)
        {
            <section class="flex items-center justify-center flex-col">
                @if (_isEditing)
                {
                    <ProfileEditForm Profile="_profile" OnEditFinished="StopEdit"/>
                }
                else
                {
                    <div class="w-1/2 flex justify-between items-center mb-2">
                        <h1>Profile with ID: @ProfileId</h1>
                        <div>
                            @if (_ownProfile)
                            {
                                <StyledButton ButtonStyle="StyledButton.Style.Blue" OnClickCallback="StartEdit">Edit</StyledButton>
                                <StyledButton ButtonStyle="StyledButton.Style.Red" OnClickCallback="DeleteCallback">Delete</StyledButton>
                            }
                            else
                            {
                                @if (LikeService.HasLiked(AuthService.CurrentUser.Id, _profile.UserId))
                                {
                                    <StyledButton ButtonStyle="StyledButton.Style.Red" OnClickCallback="UnlikeCallback">Unlike</StyledButton>
                                }
                                else
                                {
                                    <StyledButton ButtonStyle="StyledButton.Style.Green" OnClickCallback="LikeCallback">Like</StyledButton>
                                }
                                <StyledButton ButtonStyle="StyledButton.Style.Blue">Message</StyledButton>
                            }
                        </div>
                    </div>
                    <div class="w-1/2 flex flex-wrap gap-4 rounded border p-2">
                        <div class="basis-[calc(50%-0.5rem)]">
                            <h2 class="text-sm text-slate-600">Firstname</h2>
                            <p class="font-medium">@_profile?.FirstName</p>
                        </div>
                        <div class="basis-[calc(50%-0.5rem)]">
                            <h2 class="text-sm text-slate-600">Lastname</h2>
                            <p class="font-medium">@_profile?.LastName</p>
                        </div>
                        <div class="basis-[calc(50%-0.5rem)]">
                            <h2 class="text-sm text-slate-600">Gender</h2>
                            <p class="font-medium">@_profile.Gender</p>
                        </div>
                        <div class="basis-[calc(50%-0.5rem)]">
                            <h2 class="text-sm text-slate-600">Age</h2>
                            <p class="font-medium">@_profile.DateOfBirth</p> @* show date for now -- todo show age and hover for date *@
                        </div>
                        <div class="basis-[calc(50%-0.5rem)]">
                            <h2 class="text-sm text-slate-600">City</h2>
                            <p class="font-medium">@_profile.ZipCode</p> @* todo translate zipcode to city*@
                        </div>
                        <div class="basis-[calc(50%-0.5rem)]">
                            <h2 class="text-sm text-slate-600">Height</h2>
                            <p class="font-medium">@_profile.Height</p>
                        </div>
                        <div class="basis-[calc(50%-0.5rem)]">
                            <h2 class="text-sm text-slate-600">Weight</h2>
                            <p class="font-medium">@_profile.Weight</p>
                        </div>
                    </div>
                }
            </section>
        }
    }
</AuthedView>

@code {
    [Parameter] public int? ProfileId { get; set; } = null;

    private UserProfile? _profile = null;
    private bool _ownProfile = false;
    private bool _isEditing = false;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (!firstRender || !AuthService.IsLoggedIn) return;

        if (ProfileId == null)
        {
            _profile = ProfileService.GetProfileByUserId(AuthService.CurrentUser.Id);
            ProfileId = _profile?.Id ?? null;
            _ownProfile = true;
            StateHasChanged();

            return;
        }

        _profile = ProfileService.GetProfileById(ProfileId.Value);
        _ownProfile = _profile?.UserId == AuthService.CurrentUser.Id;
        ProfileId = _profile?.Id;
        StateHasChanged();
    }

    private void StartEdit()
    {
        _isEditing = true;
        StateHasChanged();
    }

    private void StopEdit()
    {
        _isEditing = false;
        StateHasChanged();
    }

    private void CreateProfile()
    {
        _profile = ProfileService.CreateProfile(AuthService.CurrentUser.Id);
        ProfileId = _profile.Id;
        _ownProfile = true;
        _isEditing = true;
        
        StateHasChanged();
    }

    private async Task DeleteCallback()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            ProfileService.DeleteProfile(ProfileId.Value);
            Navigation.NavigateTo("/");
        }
    }

    private void UnlikeCallback()
    {
        LikeService.UnlikeUser(AuthService.CurrentUser.Id, _profile.UserId);
        StateHasChanged();
    }

    private void LikeCallback()
    {
        LikeService.LikeUser(AuthService.CurrentUser.Id, _profile.UserId);
        StateHasChanged();
    }

}