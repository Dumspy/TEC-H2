@using DatingApp.Services
@implements IDisposable
@inject AuthService AuthService
@inject NavigationManager NavigationManager

@if (AuthService.IsLoggedIn)
{
    @ChildContent
}

@code {
    [Parameter] public required RenderFragment ChildContent { get; set; }

    [Parameter] public bool ReturnAfterAuth { get; set; } = false;

    protected override void OnInitialized()
    {
        AuthService.OnStateChange += OnAuthChange; // Subscribe to event
    }

    private void OnAuthChange(object? sender, EventArgs e)
    {
        AuthRedirect();
    }

    public void Dispose()
    {
        AuthService.OnStateChange -= OnAuthChange; // Unsubscribe on dispose
    }

    protected override void OnAfterRender(bool firstRender)
    {
        AuthRedirect();
        base.OnAfterRender(firstRender);
    }

    private void AuthRedirect()
    {
        if (AuthService.IsLoggedIn)
        {
            return;
        }
        
        if (ReturnAfterAuth)
        {
            AuthService.RedirectUrl = new Uri(NavigationManager.Uri).AbsolutePath;
        }
        NavigationManager.NavigateTo("/auth");
    }
}